<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="build">
    <property name="composer.path" value="${basedir}/composer.phar"/>
    <property name="selenium.path" value="${basedir}/bin/selenium-server.jar"/>
    <property name="chrome.path" value="${basedir}/bin/chromedriver"/>
    <property name="php.cmd" value="php54"/>

    <target name="build"
            depends="prepare,composer,vendors,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdoc,parameters,database,assetic,cache,assets,selenium,selenium-start,behat,phpunit,phpcb"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdoc"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/app/build/api"/>
        <delete dir="${basedir}/app/build/code-browser"/>
        <delete dir="${basedir}/app/build/coverage"/>
        <delete dir="${basedir}/app/build/logs"/>
        <delete dir="${basedir}/app/build/pdepend"/>
        <delete dir="${basedir}/app/build/behat"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/app/build/api"/>
        <mkdir dir="${basedir}/app/build/code-browser"/>
        <mkdir dir="${basedir}/app/build/coverage"/>
        <mkdir dir="${basedir}/app/build/logs"/>
        <mkdir dir="${basedir}/app/build/pdepend"/>
        <mkdir dir="${basedir}/app/build/phpdoc"/>
        <mkdir dir="${basedir}/app/build/behat/"/>
        <touch file="${basedir}/app/build/behat/result.txt"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="${php.cmd}" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}/src">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv"/>
            <arg value="${basedir}/app/build/logs/phploc.csv"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/app/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/app/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/app/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="text"/>
            <arg value="${basedir}/app/phpmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="xml"/>
            <arg value="${basedir}/app/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg value="${basedir}/app/build/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/app/build/logs/checkstyle.xml"/>
            <arg value="--standard=Symfony2"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/app/build/logs/checkstyle.xml"/>
            <arg value="--standard=Symfony2"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd"/>
            <arg value="${basedir}/app/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/src"/>
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using phpdoc">
        <exec executable="phpdoc">
            <arg line="-d '${basedir}/src' -t '${basedir}/app/build/api' --title='Tempo' "/>
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="-c"/>
            <arg path="${basedir}/app/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log"/>
            <arg path="${basedir}/app/build/logs"/>
            <arg value="--source"/>
            <arg path="${basedir}/src"/>
            <arg value="--output"/>
            <arg path="${basedir}/app/build/code-browser"/>
        </exec>
    </target>


    <target name="composer" unless="composer.exists">
        <get src="http://getcomposer.org/composer.phar" dest="${composer.path}"/>
        <chmod file="${composer.path}" perm="775"/>
    </target>

    <target name="vendors" depends="composer" description="Update vendors" unless="true">
        <exec executable="${php.cmd}" failonerror="true">
            <arg value="${basedir}/composer.phar"/>
            <arg value="install"/>
            <arg value="--prefer-dist"/>
            <arg value="-vvv"/>
            <arg value="--profile"/>
        </exec>
    </target>

    <target name="parameters" description="Copy parameters">
        <exec executable="cp" failonerror="true">
            <arg path="app/config/parameters.yml.dist"/>
            <arg path="app/config/parameters.yml"/>
        </exec>
    </target>

    <target name="cache" description="Cleanup cache">
        <exec executable="${php.cmd}">
            <arg value="${basedir}/bin/console"/>
            <arg value="cache:clear"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="database" depends="vendors" description="Database update">
        <chmod file="${basedir}/bin/init-db" perm="740"/>
        <exec executable="${basedir}/bin/init-db" failonerror="true">
            <arg value="--env=test"/>
        </exec>
        <chmod file="${basedir}/bin/init-mongodb" perm="740"/>
        <exec executable="${basedir}/bin/init-mongodb" failonerror="true">
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="assetic" description="Dumping assets">
        <exec executable="${php.cmd}">
            <arg value="${basedir}/bin/console"/>
            <arg value="assetic:dump"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="assets" description="Installing assets">
        <exec executable="${php.cmd}">
            <arg value="${basedir}/bin/console"/>
            <arg value="assets:install"/>
            <arg value="--symlink"/>
            <arg value="${basedir}/web"/>
        </exec>
    </target>

    <target name="selenium" unless="selenium.exists">
        <get src="http://selenium-release.storage.googleapis.com/2.45/selenium-server-standalone-2.45.0.jar"
             dest="${selenium.path}"/>
    </target>

    <target name="chrome" depends="selenium" unless="chrome.exists">
        <get src="http://chromedriver.storage.googleapis.com/2.14/chromedriver_linux64.zip"
             dest="${chrome.path}"/>
    </target>


    <target name="selenium-start" depends="chrome">
        <chmod file="${basedir}/bin/start-selenium" perm="744"/>
        <chmod file="${chrome.path}" perm="777"/>
        <exec executable="${basedir}/bin/start-selenium">
        </exec>
    </target>


    <target name="behat" depends="selenium-start" description="Validates features">
        <chmod file="${basedir}/bin/behat" perm="740"/>
        <exec executable="${basedir}/bin/behat" failonerror="true">
            <arg value="--format=pretty"/>
            <arg value="--out=${basedir}/app/build/behat/result.txt"/>
            <arg value="--profile=test"/>
        </exec>
    </target>


</project>

